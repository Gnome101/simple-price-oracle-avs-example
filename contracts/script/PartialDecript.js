import hre from "hardhat";
import {
  generateParameters,
  createDecryptionShare,
  encrypt,
  decrypt,
} from "threshold-elgamal";
import dotenv from "dotenv";
dotenv.config();
async function main() {
  const accounts = await hre.ethers.getSigners();
  const provider = new ethers.JsonRpcProvider(process.env.BASE_RPC_URL);
  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

  const secretVoting = await hre.ethers.getContractAt(
    "SecretVoting",
    process.env.CONTRACT_ADDRESS,
    wallet
  );
  const market = await secretVoting.market();
  const c1 = hre.ethers.toBigInt(market.c1.toString());
  const c2 = hre.ethers.toBigInt(market.c2.toString());
  // console.log(ethers);
  // console.log(c1, c2);
  const combinedEncryptedMessage = {
    c1,
    c2,
  };
  const publicKey = ethers.toBigInt(
    "8807131937870853617817564045914847910543334837234635170592973811957980539798611295063322593632718691891467692327193996909124741998636379499391022863684377129304089835421753010451426993231437524999937040976325318468778101042769455225215468177477476513704642471624253241889689331841164162251050401783902151285517325323135707426794275480542031791471145020447309285703257854651655521386879932393955996188424314042310359106510620259290443842551338598177123355253399757529426541717857380687908984633711669422686461247704465408473348336388936996122848021376354211629411851061092165719400904405460315883861280703529906889787"
  );
  const privateKey = ethers.toBigInt(
    "17198111189740987207522258066070924659068354664866153349209472785674371270060091762895376871405096450964189332505989014717404517835761512453664757667426820217481440982146617209935641204979498323812441179740390809704275764217718676871508299641960392693502986024702569368107809778413850853826168369425962712173790018017361397615845706791905366069526727215230586745271719003886933530843871633556938220645881606394868643579850622075915590012962791258951480013534977101779599471939324439360030244729834387834027239088977696746477158659363343219175191100820364097049332480659184824130271435766049092620682590274475536856966"
  );
  console.log(combinedEncryptedMessage);
  const share = createDecryptionShare(combinedEncryptedMessage, privateKey);
  console.log(createDecryptionShare);
  console.log("Sending Partial Decrypyion Share...");
  let tx = await secretVoting.submitPartialDecript(share.toString());

  await tx.wait();
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
